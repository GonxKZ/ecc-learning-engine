# ECScope WebAssembly CMakeLists - Clean and Simple
cmake_minimum_required(VERSION 3.16)

project(ECScope_WebAssembly 
    VERSION 1.0.0
    DESCRIPTION "ECScope Educational ECS Framework - WebAssembly Build"
    LANGUAGES CXX
)

# C++ Standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Emscripten-specific settings
if(EMSCRIPTEN)
    message(STATUS "Building for WebAssembly with Emscripten")
    
    # Emscripten compile flags
    set(EMCC_FLAGS 
        -sUSE_WEBGL2=1
        -sALLOW_MEMORY_GROWTH=1
        -sINITIAL_MEMORY=67108864  # 64MB
        -sMAXIMUM_MEMORY=268435456 # 256MB
        -sSTACK_SIZE=8388608       # 8MB
        -sEXPORTED_RUNTIME_METHODS=['ccall','cwrap']
        -sEXPORTED_FUNCTIONS=['_main','_malloc','_free']
    )
    
    # Debug vs Release settings
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        list(APPEND EMCC_FLAGS
            -g
            -O1
            -sASSERTIONS=1
            -sDEMANGLE_SUPPORT=1
            -sSAFE_HEAP=1
        )
    else()
        list(APPEND EMCC_FLAGS
            -O3
            -sASSERTIONS=0
            -DNDEBUG
            --closure=1
        )
    endif()
    
    # Apply flags
    string(REPLACE ";" " " EMCC_FLAGS_STR "${EMCC_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMCC_FLAGS_STR}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EMCC_FLAGS_STR}")
endif()

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/include/ecscope
)

# Source files
set(WASM_SOURCES
    src/wasm/wasm_core.cpp
    # Add other core ECScope source files here as needed
)

# Headers
set(WASM_HEADERS
    src/wasm/wasm_core.hpp
    include/ecscope/core/types.hpp
    include/ecscope/core/log.hpp
    include/ecscope/simple_profiler.hpp
    include/ecscope/simple_shader_compiler.hpp
)

# Create WebAssembly executable
add_executable(ecscope_wasm ${WASM_SOURCES})

# Set output name
set_target_properties(ecscope_wasm PROPERTIES OUTPUT_NAME "ecscope")

# Compiler-specific options
target_compile_features(ecscope_wasm PRIVATE cxx_std_20)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(ecscope_wasm PRIVATE ECSCOPE_DEBUG=1)
endif()

# Platform-specific settings
if(EMSCRIPTEN)
    # Set output files
    set_target_properties(ecscope_wasm PROPERTIES
        SUFFIX ".js"
        LINK_FLAGS "--pre-js ${CMAKE_CURRENT_SOURCE_DIR}/web/js/pre.js"
    )
    
    # Create the pre.js file if it doesn't exist
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/web/js/pre.js")
        file(MAKE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/web/js")
        file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/web/js/pre.js" 
            "// ECScope WebAssembly Pre-loader\nconsole.log('Loading ECScope WebAssembly module...');\n")
    endif()
    
    message(STATUS "WebAssembly build configured successfully")
    message(STATUS "Output will be: ecscope.js, ecscope.wasm")
else()
    message(STATUS "Building native version for testing")
endif()

# Install rules (for packaging)
install(TARGETS ecscope_wasm DESTINATION bin)
install(FILES ${WASM_HEADERS} DESTINATION include/ecscope)

# Print configuration summary
message(STATUS "ECScope WebAssembly Configuration:")
message(STATUS "  Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  CXX Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Emscripten: ${EMSCRIPTEN}")
if(EMSCRIPTEN)
    message(STATUS "  Initial Memory: 64MB")
    message(STATUS "  Maximum Memory: 256MB")
    message(STATUS "  Stack Size: 8MB")
endif()