/**
 * @file platform_config.h
 * @brief Auto-generated platform configuration header
 * 
 * This file is automatically generated by CMake based on the detected
 * platform and build configuration. Do not edit manually.
 */

#pragma once

// =============================================================================
// Build Information
// =============================================================================

#define ECSCOPE_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define ECSCOPE_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define ECSCOPE_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define ECSCOPE_VERSION_STRING "@PROJECT_VERSION@"
#define ECSCOPE_BUILD_SYSTEM_VERSION "@ECSCOPE_BUILD_SYSTEM_VERSION@"
#define ECSCOPE_BUILD_DATE "@ECSCOPE_BUILD_DATE@"

// =============================================================================
// Platform Detection
// =============================================================================

#cmakedefine ECSCOPE_PLATFORM_WINDOWS
#cmakedefine ECSCOPE_PLATFORM_LINUX  
#cmakedefine ECSCOPE_PLATFORM_MACOS
#cmakedefine ECSCOPE_PLATFORM_FREEBSD
#cmakedefine ECSCOPE_PLATFORM_IOS
#cmakedefine ECSCOPE_PLATFORM_ANDROID

// Architecture
#cmakedefine ECSCOPE_ARCH_64BIT
#cmakedefine ECSCOPE_ARCH_32BIT
#cmakedefine ECSCOPE_CPU_X86_64
#cmakedefine ECSCOPE_CPU_X86
#cmakedefine ECSCOPE_CPU_ARM64
#cmakedefine ECSCOPE_CPU_ARM32

// =============================================================================
// Feature Configuration
// =============================================================================

// Core Features
#cmakedefine ECSCOPE_ENABLE_INSTRUMENTATION
#cmakedefine ECSCOPE_EDUCATIONAL_MODE
#cmakedefine ECSCOPE_DEVELOPMENT_MODE

// Graphics and Rendering
#cmakedefine ECSCOPE_HAS_GRAPHICS
#cmakedefine ECSCOPE_HAS_SDL2
#cmakedefine ECSCOPE_HAS_OPENGL
#cmakedefine ECSCOPE_HAS_VULKAN
#cmakedefine ECSCOPE_HAS_DIRECTX
#cmakedefine ECSCOPE_HAS_METAL
#cmakedefine ECSCOPE_HAS_IMGUI

// Audio
#cmakedefine ECSCOPE_HAS_OPENAL
#cmakedefine ECSCOPE_HAS_FMOD

// Scripting
#cmakedefine ECSCOPE_HAS_SCRIPTING
#cmakedefine ECSCOPE_HAS_PYTHON
#cmakedefine ECSCOPE_HAS_PYBIND11
#cmakedefine ECSCOPE_HAS_LUA
#cmakedefine ECSCOPE_HAS_LUAJIT

// Physics
#cmakedefine ECSCOPE_ENABLE_3D_PHYSICS
#cmakedefine ECSCOPE_ENABLE_2D_PHYSICS
#cmakedefine ECSCOPE_HAS_BULLET
#cmakedefine ECSCOPE_HAS_BOX2D

// Performance and Optimization
#cmakedefine ECSCOPE_ENABLE_SIMD
#cmakedefine ECSCOPE_HAS_AVX512
#cmakedefine ECSCOPE_HAS_NEON
#cmakedefine ECSCOPE_HAS_JOB_SYSTEM
#cmakedefine ECSCOPE_HAS_NUMA

// Hardware Detection
#cmakedefine ECSCOPE_HAS_HARDWARE_DETECTION
#cmakedefine ECSCOPE_HAS_THERMAL_MANAGEMENT
#cmakedefine ECSCOPE_HAS_GRAPHICS_DETECTION

// Networking
#cmakedefine ECSCOPE_HAS_ASIO

// Testing and Benchmarking
#cmakedefine ECSCOPE_HAS_CATCH2
#cmakedefine ECSCOPE_HAS_BENCHMARK

// =============================================================================
// Compiler and Build Configuration
// =============================================================================

#define ECSCOPE_CXX_STANDARD @CMAKE_CXX_STANDARD@

#ifdef _MSC_VER
    #define ECSCOPE_COMPILER_MSVC 1
    #define ECSCOPE_COMPILER_VERSION _MSC_VER
#elif defined(__clang__)
    #define ECSCOPE_COMPILER_CLANG 1
    #define ECSCOPE_COMPILER_VERSION (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)
#elif defined(__GNUC__)
    #define ECSCOPE_COMPILER_GCC 1
    #define ECSCOPE_COMPILER_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

// Build type
#cmakedefine CMAKE_BUILD_TYPE "@CMAKE_BUILD_TYPE@"

// Build configuration defines
#cmakedefine ECSCOPE_DEBUG 1
#cmakedefine ECSCOPE_RELEASE 1
#cmakedefine ECSCOPE_RELWITHDEBINFO 1
#cmakedefine ECSCOPE_MINSIZEREL 1

// =============================================================================
// API Macros
// =============================================================================

#ifdef ECSCOPE_PLATFORM_WINDOWS
    #ifdef ECSCOPE_BUILD_SHARED
        #ifdef ECSCOPE_EXPORTS
            #define ECSCOPE_API __declspec(dllexport)
        #else
            #define ECSCOPE_API __declspec(dllimport)
        #endif
    #else
        #define ECSCOPE_API
    #endif
    #define ECSCOPE_CALL __cdecl
#else
    #if __GNUC__ >= 4
        #define ECSCOPE_API __attribute__((visibility("default")))
    #else
        #define ECSCOPE_API
    #endif
    #define ECSCOPE_CALL
#endif

// Inline and force inline macros
#ifdef ECSCOPE_COMPILER_MSVC
    #define ECSCOPE_INLINE __inline
    #define ECSCOPE_FORCE_INLINE __forceinline
    #define ECSCOPE_NEVER_INLINE __declspec(noinline)
#elif defined(ECSCOPE_COMPILER_GCC) || defined(ECSCOPE_COMPILER_CLANG)
    #define ECSCOPE_INLINE inline
    #define ECSCOPE_FORCE_INLINE __attribute__((always_inline)) inline
    #define ECSCOPE_NEVER_INLINE __attribute__((noinline))
#else
    #define ECSCOPE_INLINE inline
    #define ECSCOPE_FORCE_INLINE inline
    #define ECSCOPE_NEVER_INLINE
#endif

// Alignment macros
#ifdef ECSCOPE_COMPILER_MSVC
    #define ECSCOPE_ALIGN(n) __declspec(align(n))
#elif defined(ECSCOPE_COMPILER_GCC) || defined(ECSCOPE_COMPILER_CLANG)
    #define ECSCOPE_ALIGN(n) __attribute__((aligned(n)))
#else
    #define ECSCOPE_ALIGN(n)
#endif

// Memory barriers and atomic operations
#ifdef ECSCOPE_COMPILER_MSVC
    #define ECSCOPE_MEMORY_BARRIER() _ReadWriteBarrier()
#elif defined(ECSCOPE_COMPILER_GCC) || defined(ECSCOPE_COMPILER_CLANG)
    #define ECSCOPE_MEMORY_BARRIER() __sync_synchronize()
#else
    #define ECSCOPE_MEMORY_BARRIER()
#endif

// Branch prediction hints
#if defined(ECSCOPE_COMPILER_GCC) || defined(ECSCOPE_COMPILER_CLANG)
    #define ECSCOPE_LIKELY(x) __builtin_expect(!!(x), 1)
    #define ECSCOPE_UNLIKELY(x) __builtin_expect(!!(x), 0)
#else
    #define ECSCOPE_LIKELY(x) (x)
    #define ECSCOPE_UNLIKELY(x) (x)
#endif

// Cache line size (typically 64 bytes on modern CPUs)
#ifndef ECSCOPE_CACHE_LINE_SIZE
    #define ECSCOPE_CACHE_LINE_SIZE 64
#endif

// =============================================================================
// SIMD Configuration
// =============================================================================

#ifdef ECSCOPE_ENABLE_SIMD
    #ifdef ECSCOPE_HAS_AVX512
        #define ECSCOPE_SIMD_WIDTH 64  // AVX-512
    #elif defined(__AVX2__) || defined(__AVX__)
        #define ECSCOPE_SIMD_WIDTH 32  // AVX/AVX2
    #elif defined(__SSE4_1__) || defined(__SSE4_2__)
        #define ECSCOPE_SIMD_WIDTH 16  // SSE 4.1/4.2
    #elif defined(ECSCOPE_HAS_NEON)
        #define ECSCOPE_SIMD_WIDTH 16  // ARM NEON
    #else
        #define ECSCOPE_SIMD_WIDTH 16  // Default
    #endif
#else
    #define ECSCOPE_SIMD_WIDTH 1
#endif

// =============================================================================
// Debug and Development Macros
// =============================================================================

#ifdef ECSCOPE_DEBUG
    #define ECSCOPE_ASSERT(expr) assert(expr)
    #define ECSCOPE_DEBUG_BREAK() __debugbreak()
#else
    #define ECSCOPE_ASSERT(expr) ((void)0)
    #define ECSCOPE_DEBUG_BREAK() ((void)0)
#endif

// Profiling macros
#ifdef ECSCOPE_ENABLE_PROFILING
    #define ECSCOPE_PROFILE_SCOPE(name) // Implementation would go here
    #define ECSCOPE_PROFILE_FUNCTION() // Implementation would go here
#else
    #define ECSCOPE_PROFILE_SCOPE(name) ((void)0)
    #define ECSCOPE_PROFILE_FUNCTION() ((void)0)
#endif

// =============================================================================
// Constants
// =============================================================================

namespace ecscope {
    namespace platform {
        constexpr const char* name = "@ECSCOPE_PLATFORM_NAME@";
        constexpr const char* cpu = "@ECSCOPE_CPU_NAME@";
        constexpr const char* arch = "@ECSCOPE_ARCH_NAME@";
#ifdef ECSCOPE_ARCH_64BIT
        constexpr bool is_64bit = true;
#else
        constexpr bool is_64bit = false;
#endif
        constexpr int cache_line_size = ECSCOPE_CACHE_LINE_SIZE;
        constexpr int simd_width = ECSCOPE_SIMD_WIDTH;
    }
}