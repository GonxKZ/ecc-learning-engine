#!/bin/bash
# Linux Cross-Platform Testing Script
# Generated by CMake - do not edit manually

set -euo pipefail

echo "========================================"
echo "ECScope Linux Cross-Platform Testing"
echo "========================================"

# Check for required tools
if ! command -v cmake &> /dev/null; then
    echo "Error: CMake not found"
    exit 1
fi

if ! command -v ninja &> /dev/null && ! command -v make &> /dev/null; then
    echo "Error: Neither Ninja nor Make found"
    exit 1
fi

# Set variables
SOURCE_DIR="@CMAKE_CURRENT_SOURCE_DIR@"
BUILD_DIR="${SOURCE_DIR}/build_linux_test"
CMAKE_BUILD_TYPE="@CMAKE_BUILD_TYPE@"
GENERATOR="Ninja"

if ! command -v ninja &> /dev/null; then
    GENERATOR="Unix Makefiles"
fi

echo "Source Directory: ${SOURCE_DIR}"
echo "Build Directory: ${BUILD_DIR}"
echo "Build Type: ${CMAKE_BUILD_TYPE}"
echo "Generator: ${GENERATOR}"
echo

# Detect compiler
if command -v clang++ &> /dev/null; then
    export CC=clang
    export CXX=clang++
    COMPILER="clang"
elif command -v g++ &> /dev/null; then
    export CC=gcc
    export CXX=g++
    COMPILER="gcc"
else
    echo "Error: No suitable C++ compiler found"
    exit 1
fi

echo "Using compiler: ${COMPILER}"

# Check for X11/Wayland
if [ -n "${DISPLAY:-}" ]; then
    echo "X11 display detected: ${DISPLAY}"
    DISPLAY_SERVER="X11"
elif [ -n "${WAYLAND_DISPLAY:-}" ]; then
    echo "Wayland display detected: ${WAYLAND_DISPLAY}"
    DISPLAY_SERVER="Wayland"
else
    echo "No display server detected, setting up Xvfb..."
    if command -v Xvfb &> /dev/null; then
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 &
        XVFB_PID=$!
        sleep 3
        DISPLAY_SERVER="Xvfb"
        echo "Started Xvfb with PID: ${XVFB_PID}"
    else
        echo "Warning: No display server available and Xvfb not found"
        DISPLAY_SERVER="None"
    fi
fi

# Cleanup function
cleanup() {
    if [ -n "${XVFB_PID:-}" ]; then
        echo "Stopping Xvfb..."
        kill ${XVFB_PID} 2>/dev/null || true
    fi
}
trap cleanup EXIT

# Clean previous build
if [ -d "${BUILD_DIR}" ]; then
    echo "Cleaning previous build..."
    rm -rf "${BUILD_DIR}"
fi

# Create build directory
mkdir -p "${BUILD_DIR}"
cd "${BUILD_DIR}"

# Configure
echo "Configuring CMake..."
cmake -G "${GENERATOR}" \
    -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
    -DCMAKE_C_COMPILER="${CC}" \
    -DCMAKE_CXX_COMPILER="${CXX}" \
    -DECSCOPE_BUILD_TESTS=ON \
    -DECSCOPE_BUILD_CROSS_PLATFORM_TESTS=ON \
    -DECSCOPE_BUILD_GUI=ON \
    -DECSCOPE_BUILD_EXAMPLES=ON \
    -DECSCOPE_ENABLE_SANITIZERS=ON \
    "${SOURCE_DIR}"

echo "Building project..."
cmake --build . --parallel

# Run tests
echo "Running cross-platform tests..."
set +e  # Don't exit on test failures
ctest --parallel --output-on-failure --label-regex "cross-platform"
TEST_EXIT_CODE=$?
set -e

# Run additional Linux-specific tests
echo "Running Linux-specific tests..."
if [ -f "bin/ecscope_gui_compatibility_test" ]; then
    ./bin/ecscope_gui_compatibility_test --reporter=junit --out=gui_test_results.xml || true
fi

if [ -f "bin/ecscope_display_test" ]; then
    ./bin/ecscope_display_test --dpi-test --json-output > dpi_test_results.json || true
fi

# Test with Valgrind if available
if command -v valgrind &> /dev/null && [ "${CMAKE_BUILD_TYPE}" = "Debug" ]; then
    echo "Running memory tests with Valgrind..."
    if [ -f "bin/ecscope_gui_compatibility_test" ]; then
        valgrind --tool=memcheck \
            --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            --xml=yes \
            --xml-file=valgrind_results.xml \
            ./bin/ecscope_gui_compatibility_test || true
    fi
fi

# Generate report
echo "Generating test report..."
python3 "${SOURCE_DIR}/scripts/cross_platform/generate_test_report.py" \
    --build-dir "${BUILD_DIR}" \
    --platform linux \
    --compiler "${COMPILER}" \
    --build-type "${CMAKE_BUILD_TYPE}" \
    --output linux_test_report.json || true

echo
echo "========================================"
echo "Linux Testing Complete"
echo "========================================"
echo "Build Directory: ${BUILD_DIR}"
echo "Test Results: linux_test_report.json"
echo "Display Server: ${DISPLAY_SERVER}"
echo "Compiler: ${COMPILER}"

if [ ${TEST_EXIT_CODE} -eq 0 ]; then
    echo "Status: ALL TESTS PASSED"
    exit 0
else
    echo "Status: SOME TESTS FAILED"
    exit 1
fi