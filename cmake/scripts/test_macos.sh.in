#!/bin/bash
# macOS Cross-Platform Testing Script
# Generated by CMake - do not edit manually

set -euo pipefail

echo "========================================"
echo "ECScope macOS Cross-Platform Testing"
echo "========================================"

# Check for required tools
if ! command -v cmake &> /dev/null; then
    echo "Error: CMake not found"
    echo "Install with: brew install cmake"
    exit 1
fi

if ! command -v xcodebuild &> /dev/null; then
    echo "Error: Xcode build tools not found"
    echo "Install with: xcode-select --install"
    exit 1
fi

# Set variables
SOURCE_DIR="@CMAKE_CURRENT_SOURCE_DIR@"
BUILD_DIR="${SOURCE_DIR}/build_macos_test"
CMAKE_BUILD_TYPE="@CMAKE_BUILD_TYPE@"

echo "Source Directory: ${SOURCE_DIR}"
echo "Build Directory: ${BUILD_DIR}"
echo "Build Type: ${CMAKE_BUILD_TYPE}"
echo

# Detect system information
SYSTEM_VERSION=$(sw_vers -productVersion)
HARDWARE_PLATFORM=$(uname -m)

echo "macOS Version: ${SYSTEM_VERSION}"
echo "Hardware Platform: ${HARDWARE_PLATFORM}"

# Check for Retina display
if system_profiler SPDisplaysDataType | grep -q "Retina"; then
    echo "Retina display detected"
    RETINA_DISPLAY=true
else
    echo "Standard display detected"
    RETINA_DISPLAY=false
fi

# Check for Metal support
if system_profiler SPDisplaysDataType | grep -q "Metal"; then
    echo "Metal support detected"
    METAL_SUPPORT=true
else
    echo "No Metal support detected"
    METAL_SUPPORT=false
fi

# Clean previous build
if [ -d "${BUILD_DIR}" ]; then
    echo "Cleaning previous build..."
    rm -rf "${BUILD_DIR}"
fi

# Create build directory
mkdir -p "${BUILD_DIR}"
cd "${BUILD_DIR}"

# Configure with Xcode generator
echo "Configuring CMake with Xcode generator..."
cmake -G "Xcode" \
    -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
    -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
    -DECSCOPE_BUILD_TESTS=ON \
    -DECSCOPE_BUILD_CROSS_PLATFORM_TESTS=ON \
    -DECSCOPE_BUILD_GUI=ON \
    -DECSCOPE_BUILD_EXAMPLES=ON \
    -DECSCOPE_ENABLE_SANITIZERS=ON \
    "${SOURCE_DIR}"

echo "Building project..."
cmake --build . --config "${CMAKE_BUILD_TYPE}" --parallel

# Run tests
echo "Running cross-platform tests..."
set +e  # Don't exit on test failures
ctest --build-config "${CMAKE_BUILD_TYPE}" --parallel --output-on-failure --label-regex "cross-platform"
TEST_EXIT_CODE=$?
set -e

# Run additional macOS-specific tests
echo "Running macOS-specific tests..."
if [ -f "bin/${CMAKE_BUILD_TYPE}/ecscope_gui_compatibility_test" ]; then
    ./bin/${CMAKE_BUILD_TYPE}/ecscope_gui_compatibility_test --reporter=junit --out=gui_test_results.xml || true
fi

if [ -f "bin/${CMAKE_BUILD_TYPE}/ecscope_display_test" ]; then
    ./bin/${CMAKE_BUILD_TYPE}/ecscope_display_test --dpi-test --json-output > dpi_test_results.json || true
fi

# Test Retina display handling if available
if [ "${RETINA_DISPLAY}" = true ] && [ -f "bin/${CMAKE_BUILD_TYPE}/ecscope_display_test" ]; then
    echo "Running Retina display tests..."
    ./bin/${CMAKE_BUILD_TYPE}/ecscope_display_test --retina-test --json-output > retina_test_results.json || true
fi

# Test with AddressSanitizer if available
if [ "${CMAKE_BUILD_TYPE}" = "Debug" ] && [ -f "bin/${CMAKE_BUILD_TYPE}/ecscope_gui_compatibility_test" ]; then
    echo "Running AddressSanitizer tests..."
    export MallocNanoZone=0  # Disable nano malloc for better ASan compatibility
    export ASAN_OPTIONS="detect_leaks=1:abort_on_error=1"
    ./bin/${CMAKE_BUILD_TYPE}/ecscope_gui_compatibility_test --asan-test || true
fi

# Check code signing (if in Release mode)
if [ "${CMAKE_BUILD_TYPE}" = "Release" ]; then
    echo "Checking code signing..."
    for binary in bin/${CMAKE_BUILD_TYPE}/ecscope_*; do
        if [ -f "${binary}" ]; then
            echo "Checking signature for $(basename "${binary}"):"
            codesign -vv "${binary}" || echo "Warning: Binary not signed"
        fi
    done
fi

# Test App Bundle creation (if applicable)
if [ -d "bin/${CMAKE_BUILD_TYPE}/ECScope.app" ]; then
    echo "Testing App Bundle..."
    echo "Bundle structure:"
    find "bin/${CMAKE_BUILD_TYPE}/ECScope.app" -type f | head -20
    
    # Validate bundle
    if [ -f "/usr/bin/plutil" ]; then
        echo "Validating Info.plist..."
        plutil -lint "bin/${CMAKE_BUILD_TYPE}/ECScope.app/Contents/Info.plist" || echo "Warning: Invalid Info.plist"
    fi
fi

# Generate report
echo "Generating test report..."
python3 "${SOURCE_DIR}/scripts/cross_platform/generate_test_report.py" \
    --build-dir "${BUILD_DIR}" \
    --platform macos \
    --compiler clang \
    --build-type "${CMAKE_BUILD_TYPE}" \
    --output macos_test_report.json || true

echo
echo "========================================"
echo "macOS Testing Complete"
echo "========================================"
echo "Build Directory: ${BUILD_DIR}"
echo "Test Results: macos_test_report.json"
echo "System: macOS ${SYSTEM_VERSION} (${HARDWARE_PLATFORM})"
echo "Retina Display: ${RETINA_DISPLAY}"
echo "Metal Support: ${METAL_SUPPORT}"

if [ ${TEST_EXIT_CODE} -eq 0 ]; then
    echo "Status: ALL TESTS PASSED"
    exit 0
else
    echo "Status: SOME TESTS FAILED"
    exit 1
fi