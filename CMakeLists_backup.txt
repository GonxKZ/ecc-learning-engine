cmake_minimum_required(VERSION 3.22)
project(ECScope 
    VERSION 0.1.0
    DESCRIPTION "Educational ECS Engine with Memory Observatory"
    LANGUAGES CXX)

# Build system metadata
set(ECSCOPE_BUILD_SYSTEM_VERSION "2.0.0")
set(ECSCOPE_BUILD_TIMESTAMP "${CMAKE_CURRENT_LIST_DIR}")
string(TIMESTAMP ECSCOPE_BUILD_DATE "%Y-%m-%d %H:%M:%S")

# Enable modern CMake features
cmake_policy(SET CMP0069 NEW)  # INTERPROCEDURAL_OPTIMIZATION
cmake_policy(SET CMP0077 NEW)  # option() honors normal variables
if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)  # ExternalProject timestamps
endif()

# Include essential CMake modules
include(GNUInstallDirs)
include(CMakeDependentOption)
include(FeatureSummary)
include(CheckIPOSupported)
include(CheckCXXCompilerFlag)
include(CMakePackageConfigHelpers)

# Include ECScope custom modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(ECScope)
include(Dependencies)
include(Platform)
include(Testing)

# Set default build type if not specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build type" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Platform and architecture detection
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(ECSCOPE_PLATFORM_64BIT ON)
else()
    set(ECSCOPE_PLATFORM_64BIT OFF)
endif()

# Detect ARM architecture for NEON optimizations
if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64|ARM64)")
    set(ECSCOPE_PLATFORM_ARM64 ON)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|ARM)")
    set(ECSCOPE_PLATFORM_ARM32 ON)
else()
    set(ECSCOPE_PLATFORM_X86 ON)
endif()

# Cross-compilation support
if(CMAKE_CROSSCOMPILING)
    message(STATUS "Cross-compiling for ${CMAKE_SYSTEM_NAME} on ${CMAKE_HOST_SYSTEM_NAME}")
    set(ECSCOPE_CROSS_COMPILING ON)
endif()

# =============================================================================
# BUILD CONFIGURATION AND OPTIONS
# =============================================================================

# C++20 configuration with enhanced features
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable position independent code for shared libraries
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Export compile commands for IDE integration
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Enable colored output when using Ninja
if(CMAKE_GENERATOR STREQUAL "Ninja")
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fdiagnostics-color=always>)
endif()

# =============================================================================
# CORE BUILD OPTIONS
# =============================================================================

# Core build mode options
option(ECSCOPE_BUILD_SHARED "Build ECScope as shared library" OFF)
option(ECSCOPE_BUILD_STATIC "Build ECScope as static library" ON)
option(ECSCOPE_BUILD_TESTS "Build comprehensive unit tests" ON)
option(ECSCOPE_BUILD_BENCHMARKS "Build performance benchmarks" ON)
option(ECSCOPE_BUILD_EXAMPLES "Build educational examples" ON)
option(ECSCOPE_BUILD_DOCUMENTATION "Build API documentation" OFF)
option(ECSCOPE_BUILD_PYTHON_BINDINGS "Build Python bindings" OFF)

# Educational and development features
option(ECSCOPE_EDUCATIONAL_MODE "Enable educational demonstrations and analysis" ON)
option(ECSCOPE_DEVELOPMENT_MODE "Enable development tools and debugging" OFF)
option(ECSCOPE_ENABLE_PROFILING "Enable detailed profiling support" OFF)
option(ECSCOPE_ENABLE_SANITIZERS "Enable address/thread/UB sanitizers" OFF)

# Core engine features
option(ECSCOPE_ENABLE_INSTRUMENTATION "Enable tracing & memory hooks" ON)
option(ECSCOPE_ENABLE_GRAPHICS "Enable graphical UI (requires SDL2, ImGui)" OFF)
option(ECSCOPE_ENABLE_AUDIO "Enable audio system" OFF)
option(ECSCOPE_ENABLE_NETWORKING "Enable networking capabilities" OFF)

# Performance and optimization options
option(ECSCOPE_ENABLE_SIMD "Enable SIMD optimizations" ON)
option(ECSCOPE_ENABLE_ADVANCED_OPTIMIZATIONS "Enable advanced compiler optimizations" ON)
option(ECSCOPE_ENABLE_LTO "Enable Link Time Optimization" ON)
option(ECSCOPE_ENABLE_PGO "Enable Profile Guided Optimization" OFF)
option(ECSCOPE_ENABLE_UNITY_BUILD "Enable Unity/Jumbo builds for faster compilation" OFF)
option(ECSCOPE_ENABLE_PCH "Enable precompiled headers" ON)
option(ECSCOPE_ENABLE_CCACHE "Enable ccache for faster rebuilds" ON)

# SIMD and vectorization options
option(ECSCOPE_ENABLE_VECTORIZATION_REPORTS "Enable compiler vectorization reports" OFF)
option(ECSCOPE_ENABLE_AVX512 "Enable AVX-512 optimizations if available" ON)
option(ECSCOPE_ENABLE_ARM_NEON "Enable ARM NEON optimizations if available" ON)

# Advanced engine systems
option(ECSCOPE_ENABLE_JOB_SYSTEM "Enable work-stealing job system" ON)
option(ECSCOPE_ENABLE_NUMA "Enable NUMA awareness (Linux only)" ON)
option(ECSCOPE_ENABLE_3D_PHYSICS "Enable advanced 3D physics system" ON)
option(ECSCOPE_ENABLE_2D_PHYSICS "Enable 2D physics system" ON)
option(ECSCOPE_ENABLE_SCRIPTING "Enable Python/Lua scripting integration" ON)

# Hardware detection and optimization
option(ECSCOPE_ENABLE_HARDWARE_DETECTION "Enable comprehensive hardware detection and optimization" ON)
option(ECSCOPE_ENABLE_THERMAL_MANAGEMENT "Enable thermal and power management awareness" ON)
option(ECSCOPE_ENABLE_GRAPHICS_DETECTION "Enable GPU and graphics capability detection" ON)
option(ECSCOPE_ENABLE_CPU_TOPOLOGY "Enable CPU topology detection" ON)

# Memory management options
option(ECSCOPE_ENABLE_CUSTOM_ALLOCATORS "Enable custom memory allocators" ON)
option(ECSCOPE_ENABLE_MEMORY_DEBUGGING "Enable advanced memory debugging" ON)
option(ECSCOPE_ENABLE_MEMORY_PROFILING "Enable memory usage profiling" ON)

# Platform-specific options
cmake_dependent_option(ECSCOPE_ENABLE_WAYLAND "Enable Wayland support on Linux" ON "UNIX;NOT APPLE" OFF)
cmake_dependent_option(ECSCOPE_ENABLE_X11 "Enable X11 support on Linux" ON "UNIX;NOT APPLE" OFF)
cmake_dependent_option(ECSCOPE_ENABLE_DIRECTX "Enable DirectX support on Windows" ON "WIN32" OFF)
cmake_dependent_option(ECSCOPE_ENABLE_METAL "Enable Metal support on macOS" ON "APPLE" OFF)
cmake_dependent_option(ECSCOPE_ENABLE_VULKAN "Enable Vulkan support" ON "NOT CMAKE_SYSTEM_NAME STREQUAL iOS" OFF)

# Options
# Validate option combinations
if(ECSCOPE_BUILD_SHARED AND NOT BUILD_SHARED_LIBS)
    set(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries" FORCE)
endif()

if(ECSCOPE_ENABLE_PGO AND NOT ECSCOPE_ENABLE_LTO)
    message(WARNING "Profile Guided Optimization works best with Link Time Optimization. Consider enabling ECSCOPE_ENABLE_LTO.")
endif()

# =============================================================================
# COMPILER AND TOOLCHAIN DETECTION
# =============================================================================

# Detect compiler capabilities
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(ECSCOPE_COMPILER_SUPPORTS_COLOR_DIAGNOSTICS ON)
    set(ECSCOPE_COMPILER_SUPPORTS_SANITIZERS ON)
else()
    set(ECSCOPE_COMPILER_SUPPORTS_COLOR_DIAGNOSTICS OFF)
    set(ECSCOPE_COMPILER_SUPPORTS_SANITIZERS OFF)
endif()

# Check for ccache
if(ECSCOPE_ENABLE_CCACHE)
    find_program(CCACHE_PROGRAM ccache)
    if(CCACHE_PROGRAM)
        set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
        set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
        message(STATUS "ccache found and enabled: ${CCACHE_PROGRAM}")
    else()
        message(WARNING "ccache requested but not found")
    endif()
endif()

# Check for LTO support
if(ECSCOPE_ENABLE_LTO)
    check_ipo_supported(RESULT ECSCOPE_LTO_SUPPORTED OUTPUT error)
    if(ECSCOPE_LTO_SUPPORTED)
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
        message(STATUS "Link Time Optimization (LTO) enabled")
    else()
        message(WARNING "LTO requested but not supported: ${error}")
        set(ECSCOPE_ENABLE_LTO OFF)
    endif()
endif()

# =============================================================================
# PLATFORM CONFIGURATION AND DEPENDENCY RESOLUTION
# =============================================================================

# Configure platform-specific settings
ecscope_configure_platform()

# Resolve all dependencies
ecscope_resolve_dependencies()

# =============================================================================
# ADVANCED HARDWARE DETECTION AND OPTIMIZATION
# =============================================================================

# Hardware Detection and Runtime Optimization Configuration
if(ECSCOPE_ENABLE_HARDWARE_DETECTION)
    # Enable hardware-specific optimizations at runtime
    message(STATUS "Hardware detection and optimization enabled")
    
    # Detect current system capabilities for build-time optimization
    include(CheckCXXCompilerFlag)
    include(CheckIncludeFiles)
    
    # CPU feature detection
    try_run(RUN_RESULT COMPILE_RESULT 
        "${CMAKE_BINARY_DIR}/check_cpu_features" 
        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/detect_cpu_features.cpp"
        COMPILE_OUTPUT_VARIABLE COMPILE_OUTPUT
        RUN_OUTPUT_VARIABLE CPU_FEATURES_OUTPUT)
    
    if(RUN_RESULT EQUAL 0)
        message(STATUS "CPU features detected: ${CPU_FEATURES_OUTPUT}")
        # Parse CPU features and set appropriate compile flags
        if(CPU_FEATURES_OUTPUT MATCHES "AVX512")
            set(DETECTED_AVX512 ON)
            message(STATUS "  - AVX-512 detected")
        endif()
        if(CPU_FEATURES_OUTPUT MATCHES "AVX2")
            set(DETECTED_AVX2 ON)
            message(STATUS "  - AVX2 detected")
        endif()
        if(CPU_FEATURES_OUTPUT MATCHES "SSE4_1")
            set(DETECTED_SSE4_1 ON)
            message(STATUS "  - SSE4.1 detected")
        endif()
    endif()
    
    # Platform-specific libraries
    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        # Check for Linux-specific hardware detection libraries
        find_library(SENSORS_LIB NAMES sensors)
        if(SENSORS_LIB)
            list(APPEND PLATFORM_LIBS ${SENSORS_LIB})
            message(STATUS "  - libsensors found for thermal monitoring")
        endif()
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
        # Windows-specific libraries for hardware detection
        list(APPEND PLATFORM_LIBS pdh powerbase)
        message(STATUS "  - Windows PDH and Power libraries enabled")
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        # macOS-specific frameworks
        list(APPEND PLATFORM_LIBS "-framework IOKit" "-framework CoreFoundation")
        message(STATUS "  - macOS IOKit framework enabled")
    endif()
endif()

# Advanced optimization configuration
if(ECSCOPE_ENABLE_ADVANCED_OPTIMIZATIONS)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)  # Enable LTO
    message(STATUS "Advanced optimizations enabled (LTO, vectorization, etc.)")
endif()

# Compiler-specific advanced optimization flags
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # GCC-specific optimizations
    add_compile_options(
        -Wall -Wextra -Wpedantic
        -O3                          # Maximum optimization
        -g                           # Debug symbols
        -fno-omit-frame-pointer      # Better profiling
        -march=native                # Optimize for current CPU
        -mtune=native                # Tune for current CPU
        -ffast-math                  # Aggressive math optimizations
        -funroll-loops               # Loop unrolling
        -fprefetch-loop-arrays       # Software prefetching
        # -fvectorize               # Enable vectorization (not supported in all GCC versions)
        -ftree-vectorize             # Tree vectorization
        -fopt-info-vec-optimized     # Vectorization success reports
        -fopt-info-vec-missed        # Vectorization failure reports
    )
    
    if(ECSCOPE_ENABLE_SIMD)
        add_compile_options(
            -msse2 -msse3 -msse4.1 -msse4.2  # SSE support
            -mavx -mavx2                      # AVX support
            -mfma                             # Fused multiply-add
        )
        # Check for AVX-512 support
        include(CheckCXXCompilerFlag)
        check_cxx_compiler_flag("-mavx512f" COMPILER_SUPPORTS_AVX512)
        if(COMPILER_SUPPORTS_AVX512)
            add_compile_options(-mavx512f -mavx512vl -mavx512dq)
            message(STATUS "AVX-512 support enabled")
        endif()
    endif()
    
    if(ECSCOPE_ENABLE_VECTORIZATION_REPORTS)
        add_compile_options(-fopt-info-vec-all)
    endif()
    
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # Clang-specific optimizations
    add_compile_options(
        -Wall -Wextra -Wpedantic
        -O3                          # Maximum optimization
        -g                           # Debug symbols
        -fno-omit-frame-pointer      # Better profiling
        -march=native                # Optimize for current CPU
        -mtune=native                # Tune for current CPU
        -ffast-math                  # Aggressive math optimizations
        -funroll-loops               # Loop unrolling
        # -fvectorize               # Enable vectorization (not supported in all GCC versions)
        -fslp-vectorize              # Superword-level parallelism
    )
    
    if(ECSCOPE_ENABLE_SIMD)
        add_compile_options(
            -msse2 -msse3 -msse4.1 -msse4.2  # SSE support
            -mavx -mavx2                      # AVX support
            -mfma                             # Fused multiply-add
        )
        # Check for AVX-512 support
        include(CheckCXXCompilerFlag)
        check_cxx_compiler_flag("-mavx512f" COMPILER_SUPPORTS_AVX512)
        if(COMPILER_SUPPORTS_AVX512)
            add_compile_options(-mavx512f -mavx512vl -mavx512dq)
            message(STATUS "AVX-512 support enabled")
        endif()
    endif()
    
    if(ECSCOPE_ENABLE_VECTORIZATION_REPORTS)
        add_compile_options(-Rpass=loop-vectorize -Rpass-missed=loop-vectorize)
    endif()
    
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC-specific optimizations
    add_compile_options(
        /W4                          # High warning level
        /O2                          # Maximum optimization (speed)
        /Ob2                         # Aggressive inlining
        /Ot                          # Favor fast code
        /GT                          # Fiber-safe thread-local storage
        /GL                          # Whole program optimization
        /arch:AVX2                   # AVX2 support
    )
    
    if(ECSCOPE_ENABLE_SIMD)
        # Check for AVX-512 support
        include(CheckCXXCompilerFlag)
        check_cxx_compiler_flag("/arch:AVX512" COMPILER_SUPPORTS_AVX512)
        if(COMPILER_SUPPORTS_AVX512)
            add_compile_options(/arch:AVX512)
            message(STATUS "AVX-512 support enabled")
        endif()
    endif()
    
    # Enable vectorization reports
    if(ECSCOPE_ENABLE_VECTORIZATION_REPORTS)
        add_compile_options(/Qvec-report:2)
    endif()
    
else()
    # Default flags for unknown compilers
    add_compile_options(
        -O2                          # Basic optimization
        -g                           # Debug symbols
    )
    message(WARNING "Unknown compiler: ${CMAKE_CXX_COMPILER_ID}. Using basic optimization flags.")
endif()

# Configure SIMD support definitions
if(ECSCOPE_ENABLE_SIMD)
    add_compile_definitions(ECSCOPE_ENABLE_SIMD=1)
    message(STATUS "SIMD optimizations enabled")
else()
    message(STATUS "SIMD optimizations disabled")
endif()

# Configure 3D Physics support
if(ECSCOPE_ENABLE_3D_PHYSICS)
    add_compile_definitions(ECSCOPE_HAS_3D_PHYSICS=1)
    message(STATUS "3D Physics system enabled")
else()
    message(STATUS "3D Physics system disabled")
endif()

# Configure hardware detection and optimization features
if(ECSCOPE_ENABLE_HARDWARE_DETECTION)
    add_compile_definitions(ECSCOPE_HAS_HARDWARE_DETECTION=1)
    message(STATUS "Hardware detection system enabled")
    
    # Add detected CPU features as compile definitions
    if(DETECTED_AVX512)
        add_compile_definitions(ECSCOPE_DETECTED_AVX512=1)
    endif()
    if(DETECTED_AVX2)
        add_compile_definitions(ECSCOPE_DETECTED_AVX2=1)
    endif()
    if(DETECTED_SSE4_1)
        add_compile_definitions(ECSCOPE_DETECTED_SSE4_1=1)
    endif()
endif()

# Configure thermal and power management
if(ECSCOPE_ENABLE_THERMAL_MANAGEMENT)
    add_compile_definitions(ECSCOPE_HAS_THERMAL_MANAGEMENT=1)
    message(STATUS "Thermal and power management enabled")
endif()

# Configure graphics detection
if(ECSCOPE_ENABLE_GRAPHICS_DETECTION)
    add_compile_definitions(ECSCOPE_HAS_GRAPHICS_DETECTION=1)
    message(STATUS "Graphics capability detection enabled")
    
    # Graphics API detection
    find_package(OpenGL QUIET)
    if(OPENGL_FOUND)
        add_compile_definitions(ECSCOPE_HAS_OPENGL=1)
        message(STATUS "  - OpenGL detection enabled")
    endif()
    
    find_package(Vulkan QUIET)
    if(Vulkan_FOUND)
        add_compile_definitions(ECSCOPE_HAS_VULKAN=1)
        message(STATUS "  - Vulkan detection enabled")
        list(APPEND PLATFORM_LIBS ${Vulkan_LIBRARIES})
    endif()
    
    # Platform-specific graphics libraries
    if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
        add_compile_definitions(ECSCOPE_HAS_DIRECTX=1)
        list(APPEND PLATFORM_LIBS d3d11 d3d12 dxgi)
        message(STATUS "  - DirectX detection enabled")
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        add_compile_definitions(ECSCOPE_HAS_METAL=1)
        list(APPEND PLATFORM_LIBS "-framework Metal")
        message(STATUS "  - Metal detection enabled")
    endif()
endif()

# Configure educational mode
if(ECSCOPE_ENABLE_EDUCATIONAL_MODE)
    add_compile_definitions(ECSCOPE_EDUCATIONAL_MODE=1)
    message(STATUS "Educational demonstrations enabled")
endif()

# Configure instrumentation
if(ECSCOPE_ENABLE_INSTRUMENTATION)
    add_compile_definitions(ECSCOPE_ENABLE_INSTRUMENTATION=1)
endif()

# =============================================================================
# CORE LIBRARY CONFIGURATION
# =============================================================================

# Create ECScope core library (temporarily disabled for minimal build)
# add_library(ecscope STATIC)
# 
# # Add alias
# add_library(ECScope::ecscope ALIAS ecscope)
# 
# # Add source files to the library
# target_sources(ecscope PRIVATE
    # Core module
    src/core/log.cpp
    src/core/time.cpp
    src/core/id.cpp
    
    # ECS module
    # src/ecs/registry.cpp  # Temporarily disabled due to logging format issues
    
    # Physics module (Phase 5) - Enhanced with SIMD + 3D Physics Extension
    src/physics/math.cpp
    src/physics/simd_math.cpp
    src/physics/world3d.cpp                  # 3D physics world implementation
    
    # Renderer module (Phase 3 & Phase 7)
    src/graphics/renderer/window.cpp
    
    # 2D Rendering System (Phase 7)
    src/graphics/renderer/renderer_2d.cpp
    src/graphics/renderer/batch_renderer.cpp  
    src/graphics/renderer/resources/texture.cpp
    src/graphics/renderer/resources/shader.cpp
    
    # UI module (Phase 3) 
    src/ui/overlay.cpp
    src/ui/panels/panel_ecs_inspector.cpp
    src/ui/panels/panel_memory.cpp
    src/ui/panels/panel_stats.cpp
    src/ui/panels/panel_performance_lab.cpp
    src/ui/panels/panel_rendering_debug.cpp
    
    # Performance Laboratory (Memory Behavior Analysis)
    src/performance/performance_lab.cpp
    src/performance/memory_experiments.cpp
    src/performance/allocation_benchmarks.cpp
    
    # Memory System (Phase 4) - Enhanced with advanced memory management
    src/memory/allocators/arena.cpp
    src/memory/pools/pool.cpp
    src/memory/allocators/pool_allocator.cpp
    src/memory/mem_tracker.cpp
    src/memory/analysis/numa_manager.cpp
    src/memory/analysis/bandwidth_analyzer.cpp
    src/memory/allocators/thread_local_allocator.cpp
    src/memory/pools/hierarchical_pools.cpp
    src/memory/analysis/cache_aware_structures.cpp
    src/memory/analysis/memory_benchmark_suite.cpp
    
    # Job System (Work-Stealing Parallel Execution)
    src/concurrency/job_system/work_stealing_job_system.cpp
    src/concurrency/job_system/ecs_parallel_scheduler.cpp
    src/concurrency/job_system/ecs_job_integration.cpp
    src/concurrency/job_system/job_profiler.cpp
    
    # Hardware Detection and Optimization System
    $<$<BOOL:${ECSCOPE_ENABLE_HARDWARE_DETECTION}>:
        src/platform/hardware_detection.cpp
        src/platform/optimization_engine.cpp
        src/platform/system_integration.cpp
        src/platform/performance_benchmark.cpp
    >
    
    # Graphics Detection System  
    $<$<BOOL:${ECSCOPE_ENABLE_GRAPHICS_DETECTION}>:
        src/platform/graphics_detection.cpp
    >
    
    # Thermal and Power Management System
    $<$<BOOL:${ECSCOPE_ENABLE_THERMAL_MANAGEMENT}>:
        src/platform/thermal_power_manager.cpp
    >
    
    # Scripting Integration System (Python/Lua)
    $<$<BOOL:${ECSCOPE_ENABLE_SCRIPTING}>:
        # Note: Implementation files would go here - currently header-only
        # src/scripting/python_integration.cpp
        # src/scripting/lua_integration.cpp
        # src/scripting/hot_reload_system.cpp
        # src/scripting/ecs_script_interface.cpp
        # src/scripting/script_profiler.cpp
    >
    
    # Advanced optimization headers (header-only implementations)
    # src/ecs/advanced_concepts.hpp
    # src/ecs/soa_storage.hpp
    # src/memory/lockfree_structures.hpp
    # src/memory/lockfree_allocators.hpp
    # src/memory/hierarchical_pools.hpp
    # src/memory/cache_aware_structures.hpp
    # src/memory/thread_local_allocator.hpp
    # src/memory/memory_benchmark_suite.hpp
    # src/core/vectorization_hints.hpp
    # src/physics/simd_math.hpp
# )
# 
# # Configure include directories
# target_include_directories(ecscope
#     PUBLIC 
#         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
#         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
#         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
#     PRIVATE 
#         src
#         ${CMAKE_BINARY_DIR}/include
# )
# 
# # Generate platform configuration header
# ecscope_generate_runtime_config(ecscope)
# 
# # Apply platform-specific optimizations and link libraries
# ecscope_apply_platform_optimizations(ecscope)
# ecscope_link_platform_libraries(ecscope)
# 
# # Apply standard ECScope configuration
# ecscope_add_compiler_flags(ecscope)
# ecscope_configure_simd(ecscope)
# ecscope_configure_sanitizers(ecscope)
# ecscope_setup_pch(ecscope)
# ecscope_configure_unity_build(ecscope)
# 
# # Link platform-specific libraries for hardware detection
# if(DEFINED PLATFORM_LIBS)
#     target_link_libraries(ecscope PRIVATE ${PLATFORM_LIBS})
#     message(STATUS "Linked platform libraries: ${PLATFORM_LIBS}")
# endif()

# Dependencies configuration
set(ECSCOPE_HAS_GRAPHICS OFF)

if(ECSCOPE_ENABLE_GRAPHICS)
    # Try to find SDL2
    find_package(SDL2 QUIET)
    if(SDL2_FOUND)
        target_link_libraries(ecscope PUBLIC SDL2::SDL2)
        set(ECSCOPE_HAS_GRAPHICS ON)
        message(STATUS "SDL2 found: Enabling graphics support")
    else()
        # Try pkg-config approach
        find_package(PkgConfig QUIET)
        if(PKG_CONFIG_FOUND)
            pkg_check_modules(SDL2 QUIET sdl2)
            if(SDL2_FOUND)
                target_link_libraries(ecscope PUBLIC ${SDL2_LIBRARIES})
                target_include_directories(ecscope PUBLIC ${SDL2_INCLUDE_DIRS})
                target_compile_options(ecscope PUBLIC ${SDL2_CFLAGS_OTHER})
                set(ECSCOPE_HAS_GRAPHICS ON)
                message(STATUS "SDL2 found via pkg-config: Enabling graphics support")
            endif()
        endif()
    endif()
    
    # Try to find ImGui (typically as source in external/)
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/external/imgui/imgui.h")
        target_include_directories(ecscope PUBLIC external/imgui)
        target_sources(ecscope PRIVATE
            external/imgui/imgui.cpp
            external/imgui/imgui_demo.cpp
            external/imgui/imgui_draw.cpp
            external/imgui/imgui_tables.cpp
            external/imgui/imgui_widgets.cpp
        )
        message(STATUS "ImGui found: Adding to build")
        set(ECSCOPE_HAS_IMGUI ON)
    else()
        message(STATUS "ImGui not found in external/imgui/")
        set(ECSCOPE_HAS_IMGUI OFF)
    endif()
    
    # Find OpenGL
    find_package(OpenGL QUIET)
    if(OPENGL_FOUND)
        target_link_libraries(ecscope PUBLIC ${OPENGL_LIBRARIES})
        message(STATUS "OpenGL found: Adding to build")
    endif()
    
    if(NOT ECSCOPE_HAS_GRAPHICS)
        message(WARNING "Graphics requested but SDL2 not found. Building console-only version.")
    endif()
endif()

# Configure graphics support
if(ECSCOPE_HAS_GRAPHICS)
    target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_GRAPHICS=1)
endif()

# Job System and Threading Support
if(ECSCOPE_ENABLE_JOB_SYSTEM)
    find_package(Threads REQUIRED)
    target_link_libraries(ecscope PUBLIC Threads::Threads)
    target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_JOB_SYSTEM=1)
    
    # NUMA support on Linux
    if(ECSCOPE_ENABLE_NUMA AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        find_library(NUMA_LIBRARY numa)
        if(NUMA_LIBRARY)
            target_link_libraries(ecscope PUBLIC ${NUMA_LIBRARY})
            target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_NUMA=1)
            message(STATUS "NUMA support enabled")
        else()
            message(WARNING "NUMA requested but library not found. Disabling NUMA support.")
        endif()
    endif()
    
    message(STATUS "Job System enabled with work-stealing scheduler")
endif()

# Scripting Integration Support
if(ECSCOPE_ENABLE_SCRIPTING)
    set(ECSCOPE_HAS_SCRIPTING OFF)
    
    # Python 3 support
    find_package(Python3 COMPONENTS Interpreter Development QUIET)
    if(Python3_FOUND)
        target_include_directories(ecscope PRIVATE ${Python3_INCLUDE_DIRS})
        target_link_libraries(ecscope PUBLIC Python3::Python)
        set(ECSCOPE_HAS_PYTHON ON)
        message(STATUS "Python ${Python3_VERSION} found: Enabling Python scripting support")
    else()
        message(WARNING "Python development headers not found. Python scripting will be disabled.")
        set(ECSCOPE_HAS_PYTHON OFF)
    endif()
    
    # Lua/LuaJIT support
    find_package(PkgConfig QUIET)
    if(PKG_CONFIG_FOUND)
        pkg_check_modules(LUAJIT QUIET luajit>=2.0)
        if(LUAJIT_FOUND)
            target_include_directories(ecscope PRIVATE ${LUAJIT_INCLUDE_DIRS})
            target_link_libraries(ecscope PUBLIC ${LUAJIT_LIBRARIES})
            target_compile_definitions(ecscope PRIVATE ${LUAJIT_CFLAGS_OTHER})
            set(ECSCOPE_HAS_LUAJIT ON)
            message(STATUS "LuaJIT found: Enabling Lua scripting support")
        else()
            # Fallback to regular Lua
            find_package(Lua QUIET)
            if(LUA_FOUND)
                target_include_directories(ecscope PRIVATE ${LUA_INCLUDE_DIR})
                target_link_libraries(ecscope PUBLIC ${LUA_LIBRARIES})
                set(ECSCOPE_HAS_LUA ON)
                message(STATUS "Lua ${LUA_VERSION_STRING} found: Enabling Lua scripting support")
            else()
                message(WARNING "Neither LuaJIT nor Lua development headers found. Lua scripting will be disabled.")
                set(ECSCOPE_HAS_LUA OFF)
                set(ECSCOPE_HAS_LUAJIT OFF)
            endif()
        endif()
    else()
        message(WARNING "PkgConfig not found. Cannot search for LuaJIT. Lua scripting may be unavailable.")
    endif()
    
    # Enable scripting if at least one language is available
    if(ECSCOPE_HAS_PYTHON OR ECSCOPE_HAS_LUA OR ECSCOPE_HAS_LUAJIT)
        set(ECSCOPE_HAS_SCRIPTING ON)
        target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_SCRIPTING=1)
        
        if(ECSCOPE_HAS_PYTHON)
            target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_PYTHON=1)
        endif()
        if(ECSCOPE_HAS_LUAJIT)
            target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_LUAJIT=1)
        elseif(ECSCOPE_HAS_LUA)
            target_compile_definitions(ecscope PUBLIC ECSCOPE_HAS_LUA=1)
        endif()
        
        message(STATUS "Scripting integration enabled")
    else()
        message(WARNING "No scripting languages found. Scripting integration will be disabled.")
    endif()
endif()

# =============================================================================
# EXECUTABLES AND APPLICATIONS
# =============================================================================

# ECScope minimal console application (for testing build system)
add_executable(ecscope_minimal src/app/main_minimal.cpp)

# ECScope full console application (requires working library)
# ecscope_add_executable(
#     NAME ecscope_app
#     SOURCES src/app/main.cpp
#     DEPENDENCIES ecscope
# )

# ECScope UI application (if graphics enabled)
if(ECSCOPE_HAS_GRAPHICS)
    ecscope_add_executable(
        NAME ecscope_ui
        SOURCES src/app/main_ui.cpp
        DEPENDENCIES ecscope
    )
    
    message(STATUS "Building both console (ecscope_app) and UI (ecscope_ui) applications")
else()
    message(STATUS "Building console-only application (ecscope_app)")
endif()

# 3D Physics and Job System Integration Examples
if(ECSCOPE_ENABLE_JOB_SYSTEM)
    # 3D Physics with Job System Integration Demo
    add_executable(ecscope_3d_physics_demo)
    target_sources(ecscope_3d_physics_demo PRIVATE
        examples/reference/3d-physics-integration.cpp
    )
    target_link_libraries(ecscope_3d_physics_demo PRIVATE ecscope)
    
    # Physics Performance Benchmark (2D vs 3D)
    add_executable(ecscope_physics_benchmark)
    target_sources(ecscope_physics_benchmark PRIVATE
        examples/advanced/physics-benchmarks.cpp
    )
    target_link_libraries(ecscope_physics_benchmark PRIVATE ecscope)
    
    message(STATUS "Building 3D Physics examples with job system integration")
else()
    message(STATUS "3D Physics examples require job system - enable ECSCOPE_ENABLE_JOB_SYSTEM")
endif()

# =============================================================================
# TESTING AND BENCHMARKING
# =============================================================================

# Tests
if(ECSCOPE_BUILD_TESTS)
    add_subdirectory(tests)
endif()

# Rendering Examples and Demos (Phase 7)
if(ECSCOPE_HAS_GRAPHICS)
    # Add option to build rendering examples
    option(ECSCOPE_BUILD_EXAMPLES "Build rendering examples and tutorials" ON)
    
    if(ECSCOPE_BUILD_EXAMPLES)
        # Main rendering demonstration
        add_executable(ecscope_rendering_demo)
        target_sources(ecscope_rendering_demo PRIVATE
            examples/beginner/03-basic-rendering.cpp
        )
        target_link_libraries(ecscope_rendering_demo PRIVATE ecscope)
        
        # Performance benchmarking suite
        add_executable(ecscope_rendering_benchmarks)
        target_sources(ecscope_rendering_benchmarks PRIVATE
            examples/intermediate/06-rendering-benchmarks.cpp
        )
        target_link_libraries(ecscope_rendering_benchmarks PRIVATE ecscope)
        
        # Rendering Tutorials
        # Tutorial 1: Basic Sprite Rendering
        add_executable(ecscope_tutorial_01)
        target_sources(ecscope_tutorial_01 PRIVATE
            examples/reference/rendering-tutorials/01_basic_sprite_rendering.cpp
        )
        target_link_libraries(ecscope_tutorial_01 PRIVATE ecscope)
        
        # Tutorial 2: Batching Performance
        add_executable(ecscope_tutorial_02)
        target_sources(ecscope_tutorial_02 PRIVATE
            examples/reference/rendering-tutorials/02_sprite_batching_fundamentals.cpp
        )
        target_link_libraries(ecscope_tutorial_02 PRIVATE ecscope)
        
        # Tutorial 3: Advanced Cameras
        add_executable(ecscope_tutorial_03)
        target_sources(ecscope_tutorial_03 PRIVATE
            examples/reference/rendering-tutorials/03_camera_systems_and_viewports.cpp
        )
        target_link_libraries(ecscope_tutorial_03 PRIVATE ecscope)
        
        # Performance Laboratory Interactive Demo
        add_executable(ecscope_performance_laboratory)
        target_sources(ecscope_performance_laboratory PRIVATE
            examples/advanced/09-performance-laboratory.cpp
        )
        target_link_libraries(ecscope_performance_laboratory PRIVATE ecscope)
        
        # Advanced C++20 Optimizations Demo
        add_executable(ecscope_advanced_optimizations_demo)
        target_sources(ecscope_advanced_optimizations_demo PRIVATE
            examples/reference/optimization-showcase.cpp
        )
        target_link_libraries(ecscope_advanced_optimizations_demo PRIVATE ecscope)
        
        # Advanced Memory Management Examples
        add_executable(ecscope_advanced_memory_examples)
        target_sources(ecscope_advanced_memory_examples PRIVATE
            examples/advanced/07-custom-allocators.cpp
        )
        target_link_libraries(ecscope_advanced_memory_examples PRIVATE ecscope)
        
        # Memory Performance Validation Suite
        add_executable(ecscope_memory_performance_validation)
        target_sources(ecscope_memory_performance_validation PRIVATE
            examples/intermediate/05-performance-analysis.cpp
        )
        target_link_libraries(ecscope_memory_performance_validation PRIVATE ecscope)
        
        # Hardware Analysis Educational Demo
        if(ECSCOPE_ENABLE_HARDWARE_DETECTION AND ECSCOPE_ENABLE_EDUCATIONAL_MODE)
            add_executable(ecscope_hardware_analysis_educational)
            target_sources(ecscope_hardware_analysis_educational PRIVATE
                examples/reference/hardware-analysis.cpp
            )
            target_link_libraries(ecscope_hardware_analysis_educational PRIVATE ecscope)
            
            # Add threading support for benchmarking
            if(ECSCOPE_ENABLE_JOB_SYSTEM)
                target_link_libraries(ecscope_hardware_analysis_educational PRIVATE Threads::Threads)
            endif()
            
            message(STATUS "  - ecscope_hardware_analysis_educational (comprehensive hardware analysis and optimization demo)")
        endif()
        
        # Work-Stealing Job System Demo (if enabled)
        if(ECSCOPE_ENABLE_JOB_SYSTEM)
            add_executable(ecscope_job_system_demo)
            target_sources(ecscope_job_system_demo PRIVATE
                examples/intermediate/job-system-basics.cpp
            )
            target_link_libraries(ecscope_job_system_demo PRIVATE ecscope)
            
            # Advanced Job System Examples
            add_executable(ecscope_advanced_job_system_examples)
            target_sources(ecscope_advanced_job_system_examples PRIVATE
                examples/advanced/08-job-system-integration.cpp
            )
            target_link_libraries(ecscope_advanced_job_system_examples PRIVATE ecscope)
            
            # Add threading support
            find_package(Threads REQUIRED)
            target_link_libraries(ecscope_job_system_demo PRIVATE Threads::Threads)
            target_link_libraries(ecscope_advanced_job_system_examples PRIVATE Threads::Threads)
            
            # Add NUMA support on Linux
            if(ECSCOPE_ENABLE_NUMA AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
                target_link_libraries(ecscope_job_system_demo PRIVATE numa)
                target_link_libraries(ecscope_advanced_job_system_examples PRIVATE numa)
            endif()
        endif()
        
        # Scripting Integration Examples (if enabled)
        if(ECSCOPE_HAS_SCRIPTING)
            add_executable(ecscope_scripting_examples)
            target_sources(ecscope_scripting_examples PRIVATE
                examples/reference/scripting-showcase.cpp
            )
            target_link_libraries(ecscope_scripting_examples PRIVATE ecscope)
            
            # Add threading support for parallel script execution
            if(ECSCOPE_ENABLE_JOB_SYSTEM)
                target_link_libraries(ecscope_scripting_examples PRIVATE Threads::Threads)
            endif()
            
            message(STATUS "  - ecscope_scripting_examples (Python/Lua scripting integration demonstration)")
        endif()
        
        message(STATUS "Building rendering examples and tutorials:")
        message(STATUS "  - ecscope_rendering_demo (comprehensive demonstration)")
        message(STATUS "  - ecscope_rendering_benchmarks (performance testing)")
        message(STATUS "  - ecscope_performance_laboratory (memory behavior lab)")
        message(STATUS "  - ecscope_advanced_optimizations_demo (C++20 optimizations showcase)")
        message(STATUS "  - ecscope_advanced_memory_examples (advanced memory management examples)")
        if(ECSCOPE_ENABLE_JOB_SYSTEM)
            message(STATUS "  - ecscope_job_system_demo (work-stealing job system demonstration)")
            message(STATUS "  - ecscope_advanced_job_system_examples (advanced parallel programming examples)")
        endif()
        message(STATUS "  - ecscope_tutorial_01 (basic sprite rendering)")
        message(STATUS "  - ecscope_tutorial_02 (batching performance)")
        message(STATUS "  - ecscope_tutorial_03 (advanced cameras)")
    else()
        message(STATUS "Rendering examples disabled (ECSCOPE_BUILD_EXAMPLES=OFF)")
    endif()
else()
    message(STATUS "Rendering examples require graphics support (ECSCOPE_ENABLE_GRAPHICS=ON)")
endif()

# Performance Laboratory Core Library (minimal dependencies)
add_library(ecscope_performance_core STATIC)
target_sources(ecscope_performance_core PRIVATE
    # Core module
    src/core/log.cpp
    src/core/time.cpp
    src/core/id.cpp
    
    # Performance Laboratory (Memory Behavior Analysis)
    src/performance/performance_lab.cpp
    src/performance/memory_experiments.cpp
    src/performance/allocation_benchmarks.cpp
    
    # Memory System (Phase 4)
    src/memory/allocators/arena.cpp
    src/memory/pools/pool.cpp
    src/memory/allocators/pool_allocator.cpp
    src/memory/mem_tracker.cpp
    src/memory/analysis/numa_manager.cpp
    src/memory/analysis/bandwidth_analyzer.cpp
)

target_include_directories(ecscope_performance_core
    PUBLIC 
        include
    PRIVATE 
        src
)

# Performance Laboratory (console-based, works without graphics)
add_executable(ecscope_performance_lab_console)
target_sources(ecscope_performance_lab_console PRIVATE
    examples/advanced/09-performance-laboratory.cpp
)
target_link_libraries(ecscope_performance_lab_console PRIVATE ecscope_performance_core)
target_compile_definitions(ecscope_performance_lab_console PRIVATE ECSCOPE_CONSOLE_MODE=1)

# Print configuration
message(STATUS "")
# =============================================================================
# INSTALLATION AND PACKAGING
# =============================================================================

# Include installation configuration
include(Installation)

# Configure installation
ecscope_configure_installation()

# Configure packaging
ecscope_configure_packaging()

# Add uninstall target
ecscope_add_uninstall_target()

# Export targets for external projects
ecscope_export_targets()

# Generate documentation if requested
if(ECSCOPE_BUILD_DOCUMENTATION AND ECSCOPE_HAS_DOXYGEN)
    add_subdirectory(docs)
endif()

# =============================================================================
# FEATURE SUMMARY AND FINAL CONFIGURATION
# =============================================================================

# Add feature summary
feature_summary(
    WHAT ENABLED_FEATURES DISABLED_FEATURES PACKAGES_FOUND PACKAGES_NOT_FOUND
    DESCRIPTION "ECScope Build Configuration:"
)

message(STATUS "")
message(STATUS "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
message(STATUS "                        ECScope Configuration Summary                          ")
message(STATUS "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
message(STATUS "  Platform: ${ECSCOPE_PLATFORM_NAME} ${CMAKE_SYSTEM_VERSION}")
message(STATUS "  Architecture: ${ECSCOPE_CPU_NAME} (${ECSCOPE_ARCH_NAME})")
message(STATUS "  C++ Standard: C++${CMAKE_CXX_STANDARD}")
message(STATUS "  Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "  Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "")
message(STATUS "Core Features:")
message(STATUS "  • Build Tests: ${ECSCOPE_BUILD_TESTS}")
message(STATUS "  • Build Benchmarks: ${ECSCOPE_BUILD_BENCHMARKS}")
message(STATUS "  • Build Examples: ${ECSCOPE_BUILD_EXAMPLES}")
message(STATUS "  • Build Documentation: ${ECSCOPE_BUILD_DOCUMENTATION}")
message(STATUS "  • Instrumentation: ${ECSCOPE_ENABLE_INSTRUMENTATION}")
message(STATUS "  • Educational Mode: ${ECSCOPE_EDUCATIONAL_MODE}")
message(STATUS "")
message(STATUS "Performance Features:")
message(STATUS "  • Graphics Support: ${ECSCOPE_HAS_GRAPHICS}")
message(STATUS "  • SIMD Optimizations: ${ECSCOPE_ENABLE_SIMD}")
message(STATUS "  • Advanced Optimizations: ${ECSCOPE_ENABLE_ADVANCED_OPTIMIZATIONS}")
message(STATUS "  • Link Time Optimization: ${ECSCOPE_ENABLE_LTO}")
message(STATUS "  • Unity Build: ${ECSCOPE_ENABLE_UNITY_BUILD}")
message(STATUS "  • Precompiled Headers: ${ECSCOPE_ENABLE_PCH}")
message(STATUS "  • ccache: ${ECSCOPE_ENABLE_CCACHE}")
message(STATUS "")
message(STATUS "Engine Systems:")
message(STATUS "  • 3D Physics System: ${ECSCOPE_ENABLE_3D_PHYSICS}")
message(STATUS "  • 2D Physics System: ${ECSCOPE_ENABLE_2D_PHYSICS}")
message(STATUS "  • Job System: ${ECSCOPE_ENABLE_JOB_SYSTEM}")
message(STATUS "  • NUMA Support: ${ECSCOPE_HAS_NUMA}")
message(STATUS "  • Scripting Support: ${ECSCOPE_HAS_SCRIPTING}")
message(STATUS "  • Audio System: ${ECSCOPE_ENABLE_AUDIO}")
message(STATUS "  • Networking: ${ECSCOPE_ENABLE_NETWORKING}")
message(STATUS "")
message(STATUS "Hardware-Aware Features:")
message(STATUS "  • Hardware Detection: ${ECSCOPE_ENABLE_HARDWARE_DETECTION}")
message(STATUS "  • Graphics Detection: ${ECSCOPE_ENABLE_GRAPHICS_DETECTION}")
message(STATUS "  • Thermal Management: ${ECSCOPE_ENABLE_THERMAL_MANAGEMENT}")
message(STATUS "  • CPU Topology Detection: ${ECSCOPE_ENABLE_CPU_TOPOLOGY}")
if(ECSCOPE_ENABLE_HARDWARE_DETECTION AND RUN_RESULT EQUAL 0)
    message(STATUS "")
    message(STATUS "Detected CPU Features: ${CPU_FEATURES_OUTPUT}")
endif()
message(STATUS "")
message(STATUS "Development Tools:")
message(STATUS "  • Sanitizers: ${ECSCOPE_ENABLE_SANITIZERS}")
message(STATUS "  • Coverage Reporting: ${ECSCOPE_ENABLE_COVERAGE}")
message(STATUS "  • Profiling Support: ${ECSCOPE_ENABLE_PROFILING}")
message(STATUS "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

# Build guidance and next steps
if(NOT ECSCOPE_HAS_GRAPHICS)
    message(STATUS "")
    message(STATUS "Building console-only version (ECS core development).")
    message(STATUS "For graphics support, install SDL2 and run:")
    message(STATUS "  cmake -DECSCOPE_ENABLE_GRAPHICS=ON ..")
endif()

if(ECSCOPE_BUILD_TESTS)
    message(STATUS "")
    message(STATUS "Test Commands:")
    message(STATUS "  All tests: ctest")
    message(STATUS "  Unit tests: ctest -L unit")
    message(STATUS "  Integration tests: ctest -L integration")
    if(ECSCOPE_BUILD_BENCHMARKS)
        message(STATUS "  Performance tests: ctest -L performance")
        message(STATUS "  Run benchmarks: make run_benchmarks")
    endif()
    if(ECSCOPE_ENABLE_COVERAGE)
        message(STATUS "  Coverage report: make coverage")
    endif()
endif()

if(ECSCOPE_BUILD_EXAMPLES)
    message(STATUS "")
    message(STATUS "Educational Examples Built:")
    message(STATUS "  • Performance Laboratory: ecscope_performance_laboratory")
    message(STATUS "  • Advanced Memory Demo: ecscope_advanced_memory_examples")
    message(STATUS "  • Job System Demo: ecscope_job_system_demo")
    if(ECSCOPE_HAS_GRAPHICS)
        message(STATUS "  • 2D Rendering Demo: ecscope_rendering_demo")
        message(STATUS "  • UI Application: ecscope_ui")
    endif()
endif()

message(STATUS "")
message(STATUS "Installation Commands:")
message(STATUS "  Install: cmake --build . --target install")
message(STATUS "  Package: cmake --build . --target package")
message(STATUS "  Uninstall: cmake --build . --target uninstall")
message(STATUS "")
message(STATUS "Build complete! ECScope is ready for educational exploration. 🚀")
message(STATUS "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
message(STATUS "")